# This "Strange Basis" is my digital toolbox. Use at your own risk.
#     Copyright (C) 2024  Skylar DonLevy

"""Tests for the cookiecutter generation of projects using the local directory structure."""
import os
import subprocess
import tempfile
from pathlib import Path
from typing import Generator

import pytest


@pytest.fixture(scope="module")
def generated_project() -> Generator[str, None, None]:
    """
    A fixture that generates a project using Cookiecutter in a temporary directory.

    This function runs the Cookiecutter tool on the current directory with no input,
    specifying a temporary directory as the output location. It yields the path to
    the generated project directory. If the Cookiecutter command fails, the test
    will fail with an appropriate error message.

    Yields:
        Generator[str, None, None]: The path to the generated project directory.
    """
    with tempfile.TemporaryDirectory() as temp_dir:
        output_dir = os.path.join(temp_dir, "strangebasis-derivative")
        try:
            # Run cookiecutter on the current directory with no input and specify the output directory
            subprocess.run(["cookiecutter", ".", "--no-input", "--output-dir", temp_dir], check=True)
            yield output_dir
        except subprocess.CalledProcessError as e:
            pytest.fail(f"Cookiecutter command failed: {e}")


def test_cookiecutter_project_creation(generated_project: str) -> None:
    """
    Test for the existence of the directory structure and files that cookiecutter should generate.

    Args:
        generated_project (str): The name of the directory to be generated by cookiecutter.
    """
    try:
        # Verify that the project directory was created
        assert os.path.isdir(generated_project)

        # Optionally, check for existence of expected files
        expected_files = ["README.md", "pyproject.toml"]
        for file in expected_files:
            assert os.path.isfile(os.path.join(generated_project, file))
    except AssertionError as e:
        pytest.fail(f"Project creation failed: {e}")


@pytest.mark.dependency()
def test_init_git_repo(generated_project: Path) -> None:
    """Initialize a git repository in the generated project."""
    try:
        subprocess.run(["git", "init"], cwd=generated_project, check=True)
    except subprocess.CalledProcessError as e:
        pytest.fail(f"Git init command failed: {e}")


@pytest.mark.dependency()
def test_init_poetry(generated_project: Path) -> None:
    """Initialize a poetry project in the generated project."""
    try:
        subprocess.run(["poetry", "install", "--no-interaction"], cwd=generated_project, check=True)
    except subprocess.CalledProcessError as e:
        pytest.fail(f"Poetry init command failed: {e}")


@pytest.mark.dependency(depends=["test_init_poetry"])
def test_install_pre_commit(generated_project: Path) -> None:
    """Install pre-commit in the generated project."""
    try:
        subprocess.run(["poetry", "run", "pre-commit", "install"], cwd=generated_project, check=True)
    except subprocess.CalledProcessError as e:
        pytest.fail(f"Pre-commit install command failed: {e}")


@pytest.mark.dependency(depends=["test_init_git_repo"])
def test_git_add_all(generated_project: Path) -> None:
    """Test adding all content to be tracked by git in the generated project."""
    try:
        subprocess.run(["git", "add", "."], cwd=generated_project, check=True)
        result = subprocess.run(
            ["git", "status", ".", "--porcelain"], cwd=generated_project, capture_output=True, text=True
        )
        assert result.stderr == ""
    except subprocess.CalledProcessError as e:
        pytest.fail(f"Git add command failed: {e}")


@pytest.mark.dependency(depends=["test_init_poetry", "test_install_pre_commit", "test_git_add_all"])
def test_pre_commit_in_generated_project(generated_project: Path) -> None:
    """Test running pre-commit in the generated project."""
    try:
        subprocess.run(["poetry", "run", "pre-commit", "run", "--all-files"], cwd=generated_project, check=True)
    except subprocess.CalledProcessError as e:
        pytest.fail(f"Pre-commit command failed: {e}")


@pytest.mark.dependency(depends=["test_init_poetry"])
def test_pytest_in_generated_project(generated_project: Path) -> None:
    """Test running pytest in the generated project."""
    try:
        subprocess.run(["poetry", "run", "pytest"], cwd=generated_project, check=True)
    except subprocess.CalledProcessError as e:
        pytest.fail(f"Pytest command failed: {e}")
